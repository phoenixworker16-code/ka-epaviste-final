const { Pool } = require('pg')
const bcrypt = require('bcryptjs')
require('dotenv').config({ path: '.env.local' })

async function setupPostgreSQL() {
  console.log('üöÄ Configuration de PostgreSQL pour KA Auto √âpaves...\n')

  // Configuration de la base de donn√©es
  const pool = new Pool({
    user: process.env.DB_USER || 'postgres',
    host: process.env.DB_HOST || 'localhost',
    database: 'postgres', // Se connecter √† la DB par d√©faut
    password: process.env.DB_PASSWORD || 'test123',
    port: parseInt(process.env.DB_PORT || '5432'),
  })

  try {
    // Test de connexion
    console.log('üîç Test de connexion √† PostgreSQL...')
    const client = await pool.connect()
    console.log('‚úÖ Connexion r√©ussie √† PostgreSQL')

    // Cr√©er la base de donn√©es si elle n'existe pas
    console.log('üì¶ Cr√©ation de la base de donn√©es...')
    const dbExists = await client.query(`
      SELECT 1 FROM pg_database WHERE datname = $1
    `, [process.env.DB_NAME || 'ka_auto_epaves'])

    if (dbExists.rows.length === 0) {
      await client.query(`CREATE DATABASE ${process.env.DB_NAME || 'ka_auto_epaves'}`)
      console.log('‚úÖ Base de donn√©es cr√©√©e')
    } else {
      console.log('‚úÖ Base de donn√©es existe d√©j√†')
    }

    client.release()

    // Se connecter √† la nouvelle base de donn√©es
    const appPool = new Pool({
      user: process.env.DB_USER || 'postgres',
      host: process.env.DB_HOST || 'localhost',
      database: process.env.DB_NAME || 'ka_auto_epaves',
      password: process.env.DB_PASSWORD || 'test123',
      port: parseInt(process.env.DB_PORT || '5432'),
    })

    const appClient = await appPool.connect()

    // Cr√©er les tables manquantes
    console.log('üèóÔ∏è  V√©rification des tables...')
    
    // V√©rifier si la table removal_requests a toutes les colonnes n√©cessaires
    const tableExists = await appClient.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'removal_requests' AND table_schema = 'public'
    `)
    
    if (tableExists.rows.length === 0) {
      // Table des demandes d'enl√®vement
      await appClient.query(`
        CREATE TABLE removal_requests (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          first_name VARCHAR(100) NOT NULL,
          last_name VARCHAR(100) NOT NULL,
          email VARCHAR(255) NOT NULL,
          phone VARCHAR(20) NOT NULL,
          vehicle_brand VARCHAR(100) NOT NULL,
          vehicle_model VARCHAR(100) NOT NULL,
          vehicle_year INTEGER,
          license_plate VARCHAR(20),
          vehicle_condition VARCHAR(50) NOT NULL CHECK (vehicle_condition IN ('accidente', 'en_panne', 'hors_service', 'autre')),
          address TEXT NOT NULL,
          city VARCHAR(100) NOT NULL,
          postal_code VARCHAR(10) NOT NULL,
          additional_info TEXT,
          photo_urls TEXT[],
          status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled')),
          admin_notes TEXT,
          estimated_pickup_date DATE,
          actual_pickup_date DATE
        )
      `)
      console.log('‚úÖ Table removal_requests cr√©√©e')
    } else {
      console.log('‚úÖ Tables existantes v√©rifi√©es')
    }

    // Cr√©er un utilisateur admin par d√©faut
    console.log('üë§ Cr√©ation de l\'utilisateur admin...')
    const adminExists = await appClient.query(
      'SELECT 1 FROM users WHERE email = $1',
      ['admin@ka-auto-epaves.fr']
    )

    if (adminExists.rows.length === 0) {
      const hashedPassword = await bcrypt.hash('admin123', 10)
      
      // D'abord cr√©er l'utilisateur dans la table users
      const userResult = await appClient.query(`
        INSERT INTO users (email, password_hash)
        VALUES ($1, $2)
        RETURNING id
      `, ['admin@ka-auto-epaves.fr', hashedPassword])
      
      const userId = userResult.rows[0].id
      
      // Ensuite cr√©er l'entr√©e admin
      await appClient.query(`
        INSERT INTO admin_users (id, email, first_name, last_name, role)
        VALUES ($1, $2, $3, $4, $5)
      `, [userId, 'admin@ka-auto-epaves.fr', 'Admin', 'KA Auto √âpaves', 'super_admin'])
      
      console.log('‚úÖ Utilisateur admin cr√©√©')
      console.log('üìß Email: admin@ka-auto-epaves.fr')
      console.log('üîë Mot de passe: admin123')
    } else {
      console.log('‚úÖ Utilisateur admin existe d√©j√†')
    }

    appClient.release()
    await appPool.end()
    await pool.end()

    console.log('\nüéâ Configuration termin√©e avec succ√®s!')
    console.log('üåê Vous pouvez maintenant d√©marrer votre application avec: npm run dev')
    console.log('üîê Acc√®s admin: http://localhost:3000/admin/login')

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error)
    process.exit(1)
  }
}

setupPostgreSQL()